volumes:
  grafana-data:
  prometheus-data:    
  loki-data:
  shared_data:  # Volumen compartido entre ambos sniffers
    driver: local

services:
  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    restart: unless-stopped
    volumes:
    - ./Monitoreo/loki-config.yml:/mnt/config/loki-config.yml
    - ./Monitoreo/loki-data:/tmp/loki
    ports:
    - 3100:3100
    command: 
    - '-config.file=/mnt/config/loki-config.yml'
    networks:
      - mapfs_network
  
  grafana:
    image: grafana/grafana:10.0.2
    container_name: grafana
    restart: unless-stopped
    volumes:
    - ./Monitoreo/grafana-data:/var/lib/grafana
    ports:
    - 3000:3000
    networks:
      - mapfs_network

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
    - ./Monitoreo/prometheus.yml:/etc/prometheus/prometheus.yml
    - ./Monitoreo/prometheus-data:/prometheus
    ports:
    - 9090:9090
    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--storage.tsdb.retention.time=1y'
    - '--web.enable-lifecycle'
    networks:
      - mapfs_network

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.6.1
    container_name: node_exporter
    restart: unless-stopped
    ports:
    - 9100:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.processes
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - mapfs_network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - 8080:8080
    volumes:
      # Monta el sistema de archivos raíz del host
      - /:/rootfs:ro
      # Monta el socket de Docker para obtener información en tiempo real
      - /var/run:/var/run:rw
      # Monta los datos de Docker para acceder a los metadatos de contenedores
      - /var/lib/docker:/var/lib/docker:ro
      # Proporciona acceso a las estadísticas del kernel
      - /sys:/sys:ro
    privileged: true
    networks:
      - mapfs_network

  locust:
    build:
      context: ./Sniffing
      dockerfile: Dockerfile.locust
    image: mapfs-locust-image 
    ports:
      - "8089:8089" # Interfaz web de Locust
      - "5557:5557"  # Puerto para comunicación entre workers y master
      - "5558:5558"
    networks:
      - mapfs_network
    command: >
      --host mapfs-gateway
      --web-port 8089
      --locustfile /scripts/load_tests.py
    environment:
      - LOCUST_LOCUSTFILE=/scripts/load_tests.py
      - LOCUST_WEB_PORT=8089
    depends_on:
      - mapfs-gateway
    
  locust-metrics-exporter:
    image: containersol/locust_exporter
    ports:
      - "9646:9646"
    networks:
      - mapfs_network
    environment:
      - LOCUST_EXPORTER_WEB_LISTEN_ADDRESS=:9646
      - LOCUST_EXPORTER_WEB_TELEMETRY_PATH=/metrics
      - LOCUST_EXPORTER_URI=http://locust:8089
      - LOCUST_EXPORTER_LOG_LEVEL=debug
    depends_on:
      - locust  # Espera a que Locust esté listo antes de iniciar

  mapfs-cloud:
    build:
      context: ./IoT
      dockerfile: ./cloud/MAPFS/Dockerfile
    container_name: mapfs-cloud
    networks:
      - mapfs_network
    volumes:
      - ./Logs:/logs
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"  
    ports:
      - 8011:8011 #Prometheus
      - 5001:5001 #Socket
    command: ["python", "-m", "cloud.mapfs_cloud"]
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 10M

  mapfs-gateway:
    build:
      context: ./IoT
      dockerfile: ./gateway/MAPFS/Dockerfile
    container_name: mapfs-gateway
    depends_on:
      - mapfs-cloud
    networks:
      - mapfs_network
    volumes:
      - ./Logs:/logs
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"  
    ports:
      - 8010:8010 #Prometheus
      - 5000:5000 #Socket
      - 6000:6000 #Socket revocation
    command: ["python", "-m", "gateway.mapfs_gateway"]
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 10M
  
  mapfs-device:
    build:
      context: ./IoT
      dockerfile: ./device/MAPFS/Dockerfile
    depends_on:
      - mapfs-gateway
    networks:
      - mapfs_network
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"  
    volumes:
      - ./Logs:/logs
    ports:
      - 8012:8012 #Prometheus
    command: ["python", "-m", "device.mapfs_device"]
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 10M

  sniffer-capture:
    build:
      context: ./Sniffing
      dockerfile: Dockerfile.capture
    network_mode: host # Capturar tráfico del host
    volumes:
      - ./Sniffing/shared_data:/shared_data  # Volumen compartido
      - ./Logs:/logs
    cap_add:
      - NET_ADMIN # Permiso para sniffing
    command: [ "python", "-m", "capture_script" ]
    restart: on-failure

  sniffer-replicate:
    build:
      context: ./Sniffing
      dockerfile: Dockerfile.replicate
    networks:
      - mapfs_network
    volumes:
      - ./Sniffing/shared_data:/shared_data  # Mismo volumen compartido
      - ./Logs:/logs
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"  # Exponer el puerto de FastAPI
    command: ["uvicorn", "replicate_script:app", "--host", "0.0.0.0", "--port", "8000"]
    restart: on-failure

networks:
  mapfs_network:
    driver: bridge
